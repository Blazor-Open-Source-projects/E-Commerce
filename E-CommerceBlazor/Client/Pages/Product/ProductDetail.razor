@page "/product/{id:int}"
@using Blazored.LocalStorage;
@using E_CommerceBlazor.Client.Services.Abstract;
@using E_CommerceBlazor.Shared.Dto;
@using E_CommerceBlazor.Shared.Model;
@inject IJSRuntime _jsruntime

@inject IProductService _productService
@inject NavigationManager _navigationManager
@inject ILocalStorageService _localStorage
@inject IBasketService _basketService;
@inject IToastService _toastService;


<div class="container">
    <div class="row justify-content-center">
        <div class="card-body text-secondary text-md-start">
            <h3>Product Detail Page</h3>
        </div>

        <div class="col-md-6 mb-4 mx-auto">
            <div class="card">
                <div class="card-body text-center">
                    <img src="/image/startup-plan-business-goals-diagram.jpg" class="card-img-top" alt="product_photo">
                    <strong class="card-title">@product.Name</strong>
                </div>
                <div class="card-body text-start">
                    <p class="card-text">@product.Description</p>
                </div>
                <div class="card-body text-center mb-2">
                    <i class="btn btn-sm  btn-primary fa-solid fa-plus" @onclick="IncreseQuantity"></i>
                    <a class="text-dark mr-3">Adet : @quantity</a>
                    <i class="btn btn-sm btn-primary fa-solid fa-minus mr-5" @onclick="DecreseQuantity"></i>
                    <a class="text-danger ml-5">@totalPrice $</a>
                </div>
                <div class="card-body text-center">
                    <a @onclick="CheckBasket" class="btn btn-primary">Sepete Ekle</a>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int id { get; set; }

    int quantity { get; set; } = 1;

    ProductReadDTO product = new ProductReadDTO();

    int totalPrice { get; set; }

    List<BasketItem> items = new List<BasketItem>();

    BasketItem item = new BasketItem();


    private async void CheckBasket()
    {
        var basket =await _localStorage.GetItemAsStringAsync("basket");
        if(basket != null)
        {
            Basket createdBasket = Newtonsoft.Json.JsonConvert.DeserializeObject<Basket>(basket);

            var existingProduct = createdBasket.Items.FirstOrDefault(p => p.Id == product.Id);

            if (existingProduct != null)
            {
               
                existingProduct.Quantity += quantity;
                existingProduct.TotalItemPrice = existingProduct.Quantity * existingProduct.Price;
               
            }
            else
            {
                
                item.PictureUrl = product.PictureUrl;
                item.Price = product.Price;
                item.Quantity = quantity;
                item.Name = product.Name;
                item.TotalItemPrice = totalPrice;
                item.Id = product.Id;

                createdBasket.Items.Add(item);
            }
            var createdResult = await _basketService.CreateBasket(createdBasket);
            await _localStorage.RemoveItemAsync("basket");
            await _localStorage.SetItemAsync("basket", createdResult.Data);
            _navigationManager.NavigateTo("basket");
        }
        else
        {
            await HandleBasket();
            Console.WriteLine("in handle");
        }
    }

    private async Task HandleBasket()
    {
        item.PictureUrl = product.PictureUrl;
        item.Price = product.Price;
        item.Quantity = quantity;
        item.Name = product.Name;
        item.TotalItemPrice = totalPrice;
        item.Id = product.Id;

        items.Add(item);

        Basket basket = new Basket(items);

        var resultBasket =await _basketService.CreateBasket(basket);
        if(resultBasket.Success)
        {
            await _localStorage.SetItemAsync("basket", resultBasket.Data);
            _navigationManager.NavigateTo("basket");
            _toastService.ShowSuccess(resultBasket.Message);
        }


    }



    protected override async Task OnInitializedAsync()
    {
        var result =await _productService.GetProductById(id);

        if(result.Success)
        {
            product = result.Data;
            CalculateTotalPrice();
        }
        else
        {
            Console.WriteLine(result.Message);
        }
    }
    private void CalculateTotalPrice()
    {
        totalPrice = quantity * product.Price;
    }
   
    private async Task IncreseQuantity()
    {
        quantity++;
        CalculateTotalPrice();
    }
    private async Task DecreseQuantity()
    {
        if(quantity>1)
        {
            quantity--;
            CalculateTotalPrice();
        }
       
    }
}
