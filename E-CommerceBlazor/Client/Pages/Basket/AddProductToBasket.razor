@page "/basket"
@using Blazored.LocalStorage;
@using E_CommerceBlazor.Client.Services.Abstract;
@using E_CommerceBlazor.Shared.Dto;
@using E_CommerceBlazor.Shared.Model;
@using Newtonsoft.Json;

@inject IBasketService _basketService
@inject NavigationManager _navigationManager
@inject IToastService _toastService
@inject AuthenticationStateProvider _stateProvider
@inject ILocalStorageService _localStorate


@foreach(var item in productList)
{
    <div class="container">
        <div class="row">
            <div class="col-md-3 mb-4"> 
     
    <div class="card">
        <div class="card-body text-center">
            <img src="/image/startup-plan-business-goals-diagram.jpg" class="card-img-top" alt="product_photo">
            <strong class="card-title">@item.Name</strong>
        </div>
        <div class="card-body text-start">
            <p class="card-text">@item.Price</p>
        </div>
        <div class="card-body text-start">
            <p class="card-text">@item.Quantity</p>
        </div>
        <div class="card-body text-center mb-2">
            <i class="btn btn-sm  btn-primary fa-solid fa-plus" @onclick="IncreseQuantity"></i>
            <a class="text-dark mr-3">Adet : </a>
            <i class="btn btn-sm btn-primary fa-solid fa-minus mr-5" @onclick="DecreseQuantity"></i>
           
        </div>
        <div class="card-body text-start">
            <p class="card-text">@item.TotalItemPrice</p>
        </div>
    </div>
        </div>
    </div>
    </div>
}

<a class="text-danger ml-5">@basket.TotalPrice $</a>

@code {
    Product product = new Product();

    int quantity { get; set; }

    List<BasketItem> productList = new List<BasketItem>();

    Basket basket = new Basket();
    protected override async Task OnInitializedAsync()
    {
        var result = await _localStorate.GetItemAsStringAsync("basket");

        basket = Newtonsoft.Json.JsonConvert.DeserializeObject<Basket>(result);

        productList = basket.Items;
        

        var id =_basketService.GetBasket(basket.Id);


    }

    private async Task HandlePayment()
    {
        
    }

    private async Task IncreseQuantity()
    {
        quantity++;
        CalculateTotalPrice();
    }
    private async Task DecreseQuantity()
    {
        if (quantity > 1)
        {
            quantity--;
            CalculateTotalPrice();
        }

    }
    private void CalculateTotalPrice()
    {
        //totalPrice = quantity * product.Price;
    }

}
