@page "/admin"
@using E_CommerceBlazor.Client.Services.Abstract;
@using E_CommerceBlazor.Shared.Dto;
@using E_CommerceBlazor.Shared.Model;
@inject IToastService _toastService
@inject IProductService _productService
@inject ICategoryService _categoryService;
@inject IOrderService _orderService
@inject AuthenticationStateProvider _authState

@if(Roles == "Admin")
{
    <button class="btn btn-primary" @onclick="AddCategory"> Yeni Kategori ekle</button>
    <ul class="list-group">
        @foreach(var item in categories)
        {
            <button class="text-end btn btn-sm btn-primary" @onclick="AddCategory">Sil</button>
            <li class="list-group-item">@item.Name</li>
        }
    </ul>
}
else
{
    <h3>Sorry There is nothing to see at this address</h3>
}













@code {
    string Roles { get; set; } = string.Empty;

    CategoryCreateDTO categoryDTO = new CategoryCreateDTO();

    List<CategoryDto> categories = new List<CategoryDto>();
    List<Order> orders = new List<Order>();


    protected override async Task OnInitializedAsync()
    {
        var role = (await _authState.GetAuthenticationStateAsync()).User.Claims
        .FirstOrDefault(x => x.Type == System.Security.Claims.ClaimTypes.Role).Value;

        Roles = role;


        var categoryService =await _categoryService.GetAllCategorries();
        if(categoryService.Success)
        {
            categories = categoryService.Data;
            foreach(var item in categories)
            {
                Console.WriteLine(item);
            }
        }else
        {
            Console.WriteLine("An error occured while trying to get categories");
        }


        var allOrders = await _orderService.GetAllOrders();

        if(allOrders.Success)
        {
            orders = allOrders.Data;
        }
    }


    private async Task AddCategory()
    {

        var result =await _categoryService.AddCategory(categoryDTO);

        if(result.Success != true)
        {
            _toastService.ShowError(result.Message);
        }
        else
        {
            _toastService.ShowSuccess(result.Message);
        }
    }
    private async Task Delete(int categoryId)
    {
        var result = _categoryService.DeleteCategory(categoryId);
    }


}
